-- rejig formatting example

{-# OPTIONS_GHC -Wall #-}
{-# OPTIONS_GHC -Wno-all-case #-}

{-# LANGUAGE AllowAmbiguousTypes #-}
{-# LANGUAGE RankNTypes #-}

module Main.MyApp
where

--------------------------------------------------------------------------------

-- standard imports

import Base.Utils
import SomethingElse.Calculation

-- imports by DA*

import DA.Assert

import DA.Action
  ( replicateM
  , when
  , (<=<)
  )
import DA.Foldable
  ( mapA_
  )
import DA.Optional
  ( catOptionals
  , fromSomeNote
  )

import DA.Either qualified as E
import DA.List qualified as L
import DA.Time qualified as T

-- imports by DA.Finance*

import DA.Finance.Base.RollConvention
import DA.Finance.Instrument.Equity.CashDividend
import DA.Finance.Instrument.Equity.StockSplit
import DA.Finance.Trade.Dvp
import DA.Finance.Trade.Dvp.Settlement
import DA.Finance.Trade.SettlementInstruction
import DA.Finance.Types
import DA.Finance.Utils

-- imports by DA.Next*

import DA.Next.Map
  ( Map
  )

import DA.Next.Map qualified as M

-- imports by Main.MyApp*

import Main.MyApp.Bank
import Main.MyApp.CounterOffer
import Main.MyApp.Money
import Main.MyApp.Notes

import Main.MyApp.Currency
  ( convert
  , AUD
  , EUR
  , NZD
  , USD
  )

-- imports by Test.MyApp*

import Test.MyApp.Bank
import Test.MyApp.Money
import Test.MyApp.Notes

--------------------------------------------------------------------------------

-- | Sorts the module header 
sortModHeader :: ModuleHeader -> Reader Settings SortedModuleHeader
sortModHeader mh = do
  sortedImports <- sortImports $ _modImports mh
  sortedExports <- sortExports $ _modExports mh

  pure $ SortedModuleHeader
    { _smodName = _modName mh
    , _smodExports = sortedExports
    , _smodImports = sortedImports
    }
