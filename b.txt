
-- c1
-- c2
--     c3
--  | c45

{-|      block comment



  hello

    -}

{- me -}

{-| me4


-}

--|TODO
--  .. TOMe




{-# LANGUAGE TupleSections #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}

{-# LANGUAGE DeriveFunctor #-}


{-# LANGUAGE DerivingStrategies #-}




{-# OPTIONS_GHC -Wno-all-case #-}
{-# OPTIONS_GHC -Wall #-}

module Rejig.ImportSort
  ( toSortedGroups
  , Q.Z.map
  , tiger
  , Kettle (..)
  , module Cat.Dog.Y
  , cat
  , Month (Jan, Feb, Apr, Aug, Nov, Dec)
  , Cal.Month (Bal.Cal.Bag, Cal.Jan, App.Abbs, Z.Aggr, Bal.Cal.Feb, Z.Apr, App.Aug, Lang.Nov, A.B.CDec)
  , Speed (High, Med, (<|||>), mapple, date, app, Slow, (<***>) )
  , module Cat
  , apple
  , Apple (..)
  , A.B.C.manifold
  , A.B.C.egg
  , module Cat.Apple.Banana
  , Kite (..)
  , Bag.Unite (C.Fish)
  , module Cat.Apple.Accord
  , A.T.cat
  , A.B.fold
  , Cattle (..)
  )
where


import Data.Applicative.Hello
import DA.Time
import DA.Traversable
import DA.Alphabet.Soup

import "ccc" DA.Cat
import Data.List qualified

import Rejig.Main.App
import Data.List3 as Li.Matt
import Data.Apple.Cat as Cat.Dog.Me
import qualified Data.Apple.Cat1 as Cat.Dog.Me1
import Data.Apple.Cat2 qualified as Cat.Dog.Me2


import Data.Applicative.Hello qualified
import DA.Time qualified
import qualified Rejig.Main.Domain as D.Serv


f :: Int -> Int
f x = x
