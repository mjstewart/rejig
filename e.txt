
-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# OPTIONS_GHC -Wno-orphans #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RankNTypes #-}
module DA.Daml.LF.Ast.Optics(
    ModuleRef,
    moduleModuleRef,
    typeModuleRef,
    unlocate,
    moduleExpr,
    dataConsType,
    _PRSelfModule,
    exprPartyLiteral,
    exprValueRef,
    packageRefs,
    templateExpr,
    builtinType
    ) where

import Control.Lens
import Control.Lens.Ast
import Control.Lens.MonoTraversal
import Data.Functor.Foldable (cata, embed)
import qualified Data.NameMap as NM

import DA.Daml.LF.Ast.Base
import DA.Daml.LF.Ast.TypeLevelNat
import DA.Daml.LF.Ast.Recursive
import DA.Daml.LF.Ast.Version (Version)

-- | WARNING: The result is not a proper prism.
-- The intended use case is something along the lines of
--
-- > e ^. rightSpine (unlocate p)
--
-- which does basically the same as
--
-- > e ^. rightSpine p
--
-- but looks through location annotations.
unlocate :: Prism' Expr a -> Prism' Expr a
unlocate p = prism inj proj
  where
    inj x = p # x
    proj e = case matching p (e ^. rightSpine _ELocation . _2) of
      Left _ -> Left e
      Right x -> Right x
