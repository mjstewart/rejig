

-- line1 a
-- line2 a


-- line1 b
{- block

      comment in here

 -}
{-# OPTIONS_GHC -Wno-orphans #-}


-- flx 1
-- aapple


-- caddable


{-| hi ther
     smokey 2
-}

-- a
-- y
{-# LANGUAGE FlexibleInstances  #-}

-- apple
-- 123


-- NOTE(MH): We define 4 detail levels:
-- -2: Omit all type information, kind annotations, package ids and location information.
-- -1: Omit all package ids and all location information.



module DA.Daml.LF.Ast.Pretty(
    (<:>), map, (<##>)
    ) where

import qualified Data.Ratio                 as Ratio
import           Control.Lens
import           Control.Lens.Ast   (rightSpine)
import qualified Data.NameMap as NM
import qualified Data.Text          as T
import qualified Data.Time.Clock.POSIX      as Clock.Posix
import qualified Data.Time.Format           as Time.Format
import           Data.Foldable (toList)

import           DA.Daml.LF.Ast.Base hiding (dataCons)
import           DA.Daml.LF.Ast.TypeLevelNat
import           DA.Daml.LF.Ast.Util
import           DA.Daml.LF.Ast.Optics
import           DA.Pretty hiding (keyword_, pretty, type_)

-- NOTE(MH): We define 4 detail levels:
-- -2: Omit all type information, kind annotations, package ids and location information.
-- -1: Omit all package ids and all location information.
-- 0 (default): Omit all location information.
-- 1: Print everything.
levelHasTypes, levelHasKinds, levelHasPackageIds, levelHasLocations :: PrettyLevel -> Bool
levelHasTypes lvl = lvl >= PrettyLevel (-1)
levelHasKinds lvl = lvl >= PrettyLevel (-1)
levelHasPackageIds lvl = lvl >= PrettyLevel 0
levelHasLocations lvl = lvl >= PrettyLevel 1
