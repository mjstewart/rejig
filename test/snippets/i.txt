-- hello


{-# OPTIONS_GHC -Wno-all-case #-}

{-# OPTIONS_GHC -Wall #-}
{-# LANGUAGE AllowAmbiguousTypes #-}

 {-# LANGUAGE RankNTypes #-}

   {-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- |
-- Module      :  Text.Megaparsec.Char
-- Copyright   :  © 2015–present Megaparsec contributors
--                © 2007 Paolo Martini
--                © 1999–2001 Daan Leijen
-- License     :  FreeBSD
--
-- Maintainer  :  Mark Karpov <markkarpov92@gmail.com>
-- Stability   :  experimental
-- Portability :  non-portable
--
-- Commonly used character parsers.


{- x -}
{- -}
{- z -}
{- one line -}
{-     should Base
        here
                              and
                   here
and here-}

{-| should Base
  here
  and here
  and here
-}

{-|
-}

--Megaparsec
--you

-- some other comment


{- hello there
whats up

    NOT MUCH
is this the end?
-}

    {- is this working

    -}
 {- yup should be-}
-- why owuldnt it
  -- not sure

-- but lets see right!
-- but lets see right!

      -- but lets see right!

module Rejig.ImportSort
  ( tiger
  , toSortedGroups
  , Q.Z.map
  , Cattle (..)
  , Kettle (..)
  )
where

import Xa2

     import Xc as C
import Xa as A

--------------------------------------------------------------------------------

import DA.Act.D
-- standard imports
  import DA.Act.E
import AA
import AAD
import AB
import AC
import AD
import App.A
import App.A
import App.B
import App.B
import App.C
import App.C
import App.D
import App.D
import Base.Utils
import Base.Utils
import DA.Event
import MyApp.Test.Notes
import MyApp.Test.Notes
import Xe

import DA.Action.Egg

-- imports by DA*

import DA.Action.App

import DA.Foldable
  ( mapA_
  )
import DA.Foldable
  ( mapA_
  )
import DA.Optional
  ( catOptionals
  , fromSomeNote
  )
import DA.Optional
  ( catOptionals
  , fromSomeNote
  )

-- imports by DA.Finance*

import DA.Finance.App
import DA.Finance.Types
import DA.Finance.Utils
import DA.Finance.Utils

  import DA.Apple
--------------------------------------------------------------------------------

         import DA.Ball

  import DA.Dog


-- | hello
hello : Text -> Text
hello x =
  "hi there " <> x
