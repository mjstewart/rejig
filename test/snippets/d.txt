
-- rejig formatting example
-- v2

      {-| blocks are ok
      -}

{-# OPTIONS_GHC -Wno-all-case #-}

{-# OPTIONS_GHC -Wall #-}
{-# LANGUAGE AllowAmbiguousTypes #-}

 {-# LANGUAGE RankNTypes #-}

   {-# LANGUAGE GeneralizedNewtypeDeriving #-}




module MyApp.Main where



import DA.Foldable (mapA_)
import DA.Optional (fromSomeNote, listToOptionals, catOptionals, isSome, isNone)
import DA.Either qualified as E
import DA.Finance.Trade.Dvp
import DA.List qualified as L
import DA.Next.Set (Set)

import Test.Finance.Market.Instrument
import Daml.Trigger
import DA.Time qualified as T
        import DA.Functor ((<&>), void)
import DA.Finance.Trade.SettlementInstruction
import MyApp.Fruit (Orange, Watermelon, Mango, Blueberry, Apple)
import Test.Finance.Market.Dvp
import DA.Next.Map (Map)

import DA.Finance.Trade.SettlementInstruction

import Something.Utils
import DA.Next.Map qualified as Map
import DA.Finance.Trade.Dvp.Settlement
import Daml.Script
import DA.Finance.Base.RollConvention
import DA.Action (when, replicateA, (<=<))
import DA.Finance.Instrument.Equity.CashDividend
import DA.Next.Set qualified as S
import Something.Purchase
import Something.Bank
import Something.Currency

import DA.Assert ((===), assertNotEq, (=/=), assertEq)
import DA.Finance.Instrument.Equity.StockSplit
import DA.Finance.Types
import DA.Finance.Utils
import MyApp.Store qualified as S
import Something.Default
import MyApp.Utils qualified as U
import MyApp.Controller

import MyApp.Model
import Test.Finance.Market.Asset
import Test.Finance.Market.Party
import Test.Finance.Utils (mapMany, takeFree, (<##>), bounds, catOnly, direct, applyM)
import MyApp.Utils (mapMany, takeFree, (<##>), bounds, catOnly, direct, applyM)
import Test.StartupScript




move : Int -> Int -> [a] -> [a]
move oldIdx newIdx xs =
  let lowIdx = min oldIdx newIdx
      highIdx = max oldIdx newIdx
      (s1, r) = splitAt lowIdx xs
      (s2, s3) = splitAt (highIdx - lowIdx) r
      (s2', s3') = if oldIdx < newIdx
        then (tail s2, head s3 :: head s2 :: tail s3)
        else (head s3 :: s2, tail s3)
  in s1 ++ s2' ++ s3'
