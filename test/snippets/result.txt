-- c1
-- c2
-- c3
-- | c45

{-|      block comment



  hello
-}

{- me
-}

{-| me4
-}

-- |TODO
-- .. TOMe

{-# OPTIONS_GHC -Wall #-}
{-# OPTIONS_GHC -Wno-all-case #-}

{-# LANGUAGE DeriveFunctor #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE TupleSections #-}

module Rejig.ImportSort
  ( apple
  , cat
  , tiger
  , toSortedGroups
  , A.B.C.egg
  , A.B.C.manifold
  , A.B.fold
  , A.T.cat
  , Q.Z.map
  , Apple (..)
  , Cattle (..)
  , Kettle (..)
  , Kite (..)
  , Bag.Unite
      ( C.Fish
      )
  , Cal.Month
      ( A.B.CDec
      , App.Abbs
      , App.Aug
      , Bal.Cal.Bag
      , Bal.Cal.Feb
      , Cal.Jan
      , Lang.Nov
      , Z.Aggr
      , Z.Apr
      )
  , Month
      ( Apr
      , Aug
      , Dec
      , Feb
      , Jan
      , Nov
      )
  , Speed
      ( app
      , date
      , mapple
      , (<***>)
      , (<|||>)
      , High
      , Med
      , Slow
      )
  , module Cat
  , module Cat.Apple.Accord
  , module Cat.Apple.Banana
  , module Cat.Dog.Y
  )
where

--------------------------------------------------------------------------------

-- standard imports

import Data.Applicative.Hello
import Data.List
import Rejig.Main.App
import Rejig.Main.AppZone
import Rejig.Main.Core

import Apple ()
import Bat ()
import Data.Apple ()
import Data.Monad ()
import Data.Query.Lang ()
import Data.Text ()
import Rejig.Main.Workbench ()
import Zoo ()

import Data.Apple.Cat as Cat.Dog.Me
import Data.List as L
import Data.List3 as Li.Matt

import Data.Applicative.Hello qualified
import Data.List qualified

import Data.Apple.Cat1 qualified as Cat.Dog.Me1
import Data.Apple.Cat2 qualified as Cat.Dog.Me2
import Data.Applicative qualified as App
import Data.Applicative.C qualified as B
import Rejig.Main.Domain qualified as D.Serv

import Data.App.Apple.Hide qualified as Hi hiding
  ( acting
  , actor
  , ant
  , any
  , ba
  , bandaid
  , bed
  , dog
  , zoo
  , (!<!>!)
  , (<<<=)
  , Queue
  , Apple (..)
  , Bart (..)
  , Year (..)
  , Month
      ( Apr
      , Aug
      , Feb
      , Jan
      , Mar
      )
  )
import Data.Test.Queue qualified as A hiding
  ( ap
  , d
  , e
  )

import Data.App.Apple qualified as A
  ( acting
  , actor
  , ant
  , any
  , ba
  , bandaid
  , bed
  , dog
  , zoo
  , (!<!>!)
  , (<<<=)
  , Queue
  , Apple (..)
  , Bart (..)
  , Year (..)
  , Month
      ( Apr
      , Aug
      , Feb
      , Jan
      , Mar
      )
  )
import Data.Queue qualified as Q
  ( atlas
  , cat
  , egg
  , many
  , take
  , (!<)
  , (<<<=)
  , Week
  , Time (..)
  , Day
      ( Fri
      , Mon
      , Sat
      , Sun
      , Thur
      , Tue
      , Wed
      )
  )
import Data.Queue qualified as Q
  ( atlas
  , cat
  , egg
  , take
  , X.Y.Z.M.many
  , (!<)
  , (<<<=)
  , Week
  , Time (..)
  , Day
      ( Fri
      , Mon
      , Sat
      , Sun
      , Thur
      , Tue
      , Wed
      )
  )
import Data.Semaphore.Ident qualified as Q.Sem
  ( atlas
  , cat
  , egg
  , many
  , take
  , (!<)
  , (<<<=)
  , Week
  , Time (..)
  , Day
      ( Fri
      , Mon
      , Sat
      , Sun
      , Thur
      , Tue
      , Wed
      )
  , ZooLand
      ( ant
      , dog
      , fox
      , zebra
      )
  )
import Rejig.Main.Service qualified as S
  ( red
  , (<*!*>)
  , Sale
      ( Discount
      , Free
      , Summond
      )
  )

-- imports by DA*

import DA.Alphabet.Soup
import DA.Apex.A
import DA.Apex.B
import DA.Time
import DA.Traversable

import DA.Action.App.Main ()
import DA.Prelude ()

import DA.Time qualified
import DA.Traversable qualified

import "aaa" DA.Action.Main ()

import "bbb" DA.Time

import "bbb" DA.Action ()
import "bbb" DA.Text ()

import "ccc" DA.Adelaide
import "ccc" DA.Cat
import "ccc" DA.Traversable

import "ccc" DA.Apple
  ( berry
  , water
  , Car
      ( Ford
      , Holden
      , Honda
      )
  )

import "ccc" DA.Apple qualified as B

-- imports by DA.Next*

import DA.Next.Map ()

import DA.Next.Numeric
  ( take
  , Add
  , Plus
  , Minus (..)
  , Multiple (..)
  )
import DA.Next.Numeric2
  ( take
  , Minus (..)
  )
import DA.Next.Set
  ( Union (..)
  )
import DA.Next.Set2
  ( cartesian
  , diff
  )

-- package qualified

import "aaa" Data.Core.Cap
import "aaa" Data.List

import "aaa" Data.Applicative qualified as App
  ( Base
  , Order
  , App (..)
  , House
      ( Commercial
      , Residential
      , Retail
      )
  , Month
      ( Aa
      , Am
      , Aq
      , Ba
      , Bd
      , Ca
      , Cd
      )
  )
import "aaa" Data.Functor qualified as A.B.C
  ( app
  , map
  , (<||>)
  , Month
      ( mar
      , may
      , Apr
      , Feb
      , Jan
      , June
      )
  )

import "bbb" Data.Applicative.Hello

import "bbb" Data.Functor qualified as F

--------------------------------------------------------------------------------

f :: Int -> Int
f x = x
